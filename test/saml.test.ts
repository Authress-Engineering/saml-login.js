import { expect } from 'chai';
import SamlLogin from '../src/saml';

describe('saml.ts', () => {
  describe('getSamlAssertionMetadata()', () => {
    it('correctly parses response assertion and correctly decodes hex characters as utf8', async () => {
      const stringRequest = 'SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIElEPSJfYTFiOWFjNjAtNTFkNi00MzcxLTkzZDAtMTdhZGY0ZDM0YWNhIiBJblJlc3BvbnNlVG89IllYQXRaV0Z6ZEh4aGRYUm9jbVZ6Y3k1cGIzdzNZakkxTnpkak1HVTJPVFl4TVdWbE9HVmlaV016WmpBME9HVmxPR0l5TW53LTVka2F0bEZkUllwZ3FPMGZzNlFDODd5VU5sWTZZNk9Pb2hjQnVEeUUxWkM2RFBkVkRNRVVJMFFpbU5kb2gzamNFdmZfQ3BjcFNHMXNNUUxaYUNlOGZBX3gwMDdFX2N5YmVyYXJrLmNvbS5hcGkuYXV0aHJlc3MuaW8iIFZlcnNpb249IjIuMCIgSXNzdWVJbnN0YW50PSIyMDI0LTAzLTIwVDA4OjQ3OjMwLjA5OVoiIERlc3RpbmF0aW9uPSJodHRwczovL2xvZ2luLmF1dGhyZXNzLmlvL2FwaS9hdXRoZW50aWNhdGlvbi9zYW1sIiB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPElzc3VlciB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BaHR0cHM6Ly9hYWs3MzI4Lm15LmRldi5pZGFwdGl2ZS5hcHAvMDZhZWYxNjEtM2I1Mi00NTE4LWJiOTQtNzY5ZmQ1MTkwMTdkPC9Jc3N1ZXI%2BPFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPFNpZ25lZEluZm8%2BPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIC8%2BPFNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiIC8%2BPFJlZmVyZW5jZSBVUkk9IiNfYTFiOWFjNjAtNTFkNi00MzcxLTkzZDAtMTdhZGY0ZDM0YWNhIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiIC8%2BPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgLz48L1RyYW5zZm9ybXM%2BPERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIgLz48RGlnZXN0VmFsdWU%2BaVQ3SGhuRndockorR0ZDVmlxL0RPLzNhL1pDNVNzM29kVUQ3VWJVMUpqcz08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU%2BT0dYZzIxRWhZSUtnUkRrQ1QxMERsM29va0VZTkdGUjc3R2wyVXF2dUZBUnRWd0dpZ1ZSbkxrd0pRaFlwM3hxSzNIZTFydHRtQ3VxaDB4Nk1PVmpvRHkyQW05dmVpY1V6REtMRUxGY2x0Y21YR3RwbjNNUDc5bGJrUWNaM1BiakdvTEhBbEw1S2pjYnc4a1pKKzZoK1pnTVBCZVRzNFYvck1PU1pHTTBvZXZkdURPRHpXN1FTSmlIZVBMUmJDYnI1SUtieEJVVzNqK0tNUlpSUlpyQTZXbWVSUmErTkxxMmloTFl1RFlBdEYwUnV6c2F5eEd2N0R4NFYwcitENXFnY2ZqS0huZkZ2cG9CSGw4VkpuTlRYR0s3eTBZSG1ETXFXQitueWl3U3psamR3RUhNQWpkVnNpeHJQV29KSFBTUnJJZWhseVJwc3hxWU93MVZCNEVsdmRBPT08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOUNlcnRpZmljYXRlPk1JSURrekNDQW4yZ0F3SUJBZ0lRRythUjBhQk12MEdHcmFLS0UxL2hDVEFMQmdrcWhraUc5dzBCQVFzd0pERWlNQ0FHQTFVRUF3d1pTV1JoY0hScGRtVWdRM1Z6ZEc5dFpYSWdRVUZMTnpNeU9EQWVGdzB5TVRFd01ESXhNVFE0TUROYUZ3MHpPVEF4TURFd01EQXdNREJhTURJeE1EQXVCZ05WQkFNTUowRkJTemN6TWpnZ1FYQndiR2xqWVhScGIyNGdVMmxuYm1sdVp5QkRaWEowYVdacFkyRjBaVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNekVhSTdlckxORXFEaEZXeDNUT0pLdlcrcS9Ta3E0dmcwclpMd2V1amRpSDJPcVFzRFFtVlQ0THM4R2VHRFVLRWNOMmtxL0FnYXV3UHFOZk5EeHZ2N25lRkFSN3cyMnBSWXZnaERkQWcwQXNFeU4xQ0xxMXl5aG5CY21EMnE2eTJzTVVZMzVrcG93NkZENGJOOXdoL3JQT3B3YzRUeEQ4VGptS1NDamQzeVlkOTQwNUtzemJuS2lZNnFKK0drR0M1Q1czYlZXa051T1Z5VWJJc3c0TFVmbkdzWE9xcFBqYTNUUnk3NmI5TzE3T2dFYytKeERDY3QvNEJtdUZ5SkJNYWJPbVFmTVBnYkhiN1Avak1HVEZWMDQ4YlFoTG92c0RzUDNZV0RlTmtUcjVYS3p6K0xRNmFGazRQb1ZXTTFQcmpjVWtVQTNBMlRuWnBhUlZ4cGE5UzBDQXdFQUFhT0J0akNCc3pBVEJnb3JCZ0VFQVlLbWNBRUpCQVVNQXpFdU1EQVhCZ29yQmdFRUFZS21jQUVEQkFrTUIwRkJTemN6TWpnd0t3WURWUjBqQkNRd0lvQWdCbUJ3Z0VPTGFFTitOMGZyeWdqSlZoUEJiL2dBeC9Wd0ZmMFFHRUphbzBnd0tRWURWUjBPQkNJRUlMK3BIdnlROGtBUXBWVnBuVGg5cEFQTExpaWU5Ynd1S1ZNRHpnMHA5UXpwTUE0R0ExVWREd0VCL3dRRUF3SUZvREFiQmdvckJnRUVBWUttY0FFRUJBME1DMEZ3Y0d4cFkyRjBhVzl1TUFzR0NTcUdTSWIzRFFFQkN3T0NBUUVBVDRFakhLNFM2QlFCRlNrZG5GZTA4NVpUYzd6QnVLeGhSWUMrMGx1aC9YTXFFeHIxUHgrY0l3TkRaSlJXaWpLRWNpSmFUekJudFVhbDV4NmJ2K0psMFNHdjhBaEVTYVl2ZUxVWHNqUkgvUkNJM0FyNTFPWWtzb0luSEpDVlZlUFNFTkNQU2xkWnEzMEsyMTRWbmJUWVJUWU04dDFEZUlxRWMvY25rWmllY1FTSHA4SVY5akJ1TEdmd2Uxa3VmWG54OGthUkJ2cnlqZjVrbGJROFpyanRFUXZpVUI4VkI3S2JXV1pvOS9GNUdQODk5NkI0eGplUGxwYmZRUVYrWjVlc3BOZExrUnNzYUlRUkt6dTc5bFFSWVNKc0luMUU3MmJKLzl4VWhKMXFOcElhM3hIZ0RGeGc2Y0NraDBsRCtsM05ZcVNSdWtURVVZeks5T3JFYzgzdUxRPT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIgLz48L3NhbWwycDpTdGF0dXM%2BPEFzc2VydGlvbiBWZXJzaW9uPSIyLjAiIElEPSJfMmIzMzVkZjctMTNjZS00ZTRkLWE0NjUtMDUyYzRmNWFlODNkIiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDMtMjBUMDg6NDc6MzAuMDYyWiIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxJc3N1ZXI%2BaHR0cHM6Ly9hYWs3MzI4Lm15LmRldi5pZGFwdGl2ZS5hcHAvMDZhZWYxNjEtM2I1Mi00NTE4LWJiOTQtNzY5ZmQ1MTkwMTdkPC9Jc3N1ZXI%2BPFN1YmplY3Q%2BPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5hcHBzYWNjb3VudHNAY3liZXJhcmsuY29tPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDI0LTAzLTIwVDA5OjQ3OjMwLjA2MloiIFJlY2lwaWVudD0iaHR0cHM6Ly9sb2dpbi5hdXRocmVzcy5pby9hcGkvYXV0aGVudGljYXRpb24vc2FtbCIgSW5SZXNwb25zZVRvPSJZWEF0WldGemRIeGhkWFJvY21WemN5NXBiM3czWWpJMU56ZGpNR1UyT1RZeE1XVmxPR1ZpWldNelpqQTBPR1ZsT0dJeU1udy01ZGthdGxGZFJZcGdxTzBmczZRQzg3eVVObFk2WTZPT29oY0J1RHlFMVpDNkRQZFZETUVVSTBRaW1OZG9oM2pjRXZmX0NwY3BTRzFzTVFMWmFDZThmQX5jeWJlcmFyay5jb20uYXBpLmF1dGhyZXNzLmlvIiAvPjwvU3ViamVjdENvbmZpcm1hdGlvbj48L1N1YmplY3Q%2BPENvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDI0LTAzLTIwVDA4OjQ0OjMwLjA2MloiIE5vdE9uT3JBZnRlcj0iMjAyNC0wMy0yMFQwOTo0NzozMC4wNjJaIj48QXVkaWVuY2VSZXN0cmljdGlvbj48QXVkaWVuY2U%2BaHR0cHM6Ly9sb2dpbi5hdXRocmVzcy5pbzwvQXVkaWVuY2U%2BPC9BdWRpZW5jZVJlc3RyaWN0aW9uPjwvQ29uZGl0aW9ucz48QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDI0LTAzLTIwVDA4OjQ3OjMwLjA2MloiIFNlc3Npb25JbmRleD0iXzJiMzM1ZGY3LTEzY2UtNGU0ZC1hNDY1LTA1MmM0ZjVhZTgzZCI%2BPEF1dGhuQ29udGV4dD48QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6dW5zcGVjaWZpZWQ8L0F1dGhuQ29udGV4dENsYXNzUmVmPjwvQXV0aG5Db250ZXh0PjwvQXV0aG5TdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9zYW1sMnA6UmVzcG9uc2U%2B';
      
      const expectedResult = 'YXAtZWFzdHxhdXRocmVzcy5pb3w3YjI1NzdjMGU2OTYxMWVlOGViZWMzZjA0OGVlOGIyMnw-5dkatlFdRYpgqO0fs6QC87yUNlY6Y6OOohcBuDyE1ZC6DPdVDMEUI0QimNdoh3jcEvf_CpcpSG1sMQLZaCe8fA~cyberark.com.api.authress.io';
      const result = await new SamlLogin().getSamlAssertionMetadata(stringRequest);
      expect(result.authenticationRequestId).to.eql(expectedResult);
    });

    it('Throw Invalid Request when the status message says invalid request', async () => {
      const stringRequest = 'SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8%2BPHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vbG9naW4uYXV0aHJlc3MuaW8vYXBpL2F1dGhlbnRpY2F0aW9uL3NhbWw%2FYWNjb3VudElkPWFjYy1tN2c3ZHVzeWZraG9pIiBJRD0iXzNiY2UzYTViMmMzMTIwMDViMDA1ZDVlNzEzN2Y3YmU0IiBJc3N1ZUluc3RhbnQ9IjIwMjUtMDMtMTBUMTQ6NTc6MTkuMTYyWiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDI2MHQwd3I8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8%2BPGRzOlJlZmVyZW5jZSBVUkk9IiNfM2JjZTNhNWIyYzMxMjAwNWIwMDVkNWU3MTM3ZjdiZTQiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT4rSnN4TFhZZ2NZQU1VUng1ZFpqUEFFenhxMFlZbmNZNHpPWjJsQlRQVGJRPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LaThzMktZT3VvZWNpaWp3L0ZQYTVyQkV4VytJN2Rzd1haTjZteXhISWJ6a0FPR21iM3JwUlJzMU1ZeWR4T3lyVlhvaW1wUU9sWTRHCnBnRzZTcGRJbjAxOVdiQkhBRXRPcjczSTRXcVJPRkxJY2tpOWlkelJPYXI0dTNzMVg4LzU5ZHVVcVY3WkYrYzV6QmVyalh3SlVhazQKNWhNbUoxWXljQllqMHhWRnllaGpWSkV0bndBYklDb3VnZkpUQ3ZzQS93S25aUnpsRUlBYnZwb0JKT1o0cVgzZEE5OFpJTEdsOXlQUApBN2N1dEhNRmRpbFY0MUtKN1lOcmJYNmVCdzZYL3ZBbHR2RnhHbEVoVUhVOEZhMDd4U1NpYkhMZUNDOGYwSkRMNkpYcGNhak90QmVOCjF4Y3k0Ky9Ybkh4Y3JxRUMvSUhmZTR1bVhURHdxcHZTMUNnSkl3PT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOVN1YmplY3ROYW1lPlNUPUNhbGlmb3JuaWEsQz1VUyxPVT1Hb29nbGUgRm9yIFdvcmssQ049R29vZ2xlLEw9TW91bnRhaW4gVmlldyxPPUdvb2dsZSBJbmMuPC9kczpYNTA5U3ViamVjdE5hbWU%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEZERDQ0FseWdBd0lCQWdJR0FaVTJDR2VNTUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4RkRBU0JnTlZCQW9UQzBkdmIyZHNaU0JKCmJtTXVNUll3RkFZRFZRUUhFdzFOYjNWdWRHRnBiaUJXYVdWM01ROHdEUVlEVlFRREV3WkhiMjluYkdVeEdEQVdCZ05WQkFzVEQwZHYKYjJkc1pTQkdiM0lnVjI5eWF6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFd0hoY05NalV3TWpJMApNRE16TnpVMFdoY05NekF3TWpJek1ETXpOelUwV2pCN01SUXdFZ1lEVlFRS0V3dEhiMjluYkdVZ1NXNWpMakVXTUJRR0ExVUVCeE1OClRXOTFiblJoYVc0Z1ZtbGxkekVQTUEwR0ExVUVBeE1HUjI5dloyeGxNUmd3RmdZRFZRUUxFdzlIYjI5bmJHVWdSbTl5SUZkdmNtc3gKQ3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUEzcUZGOWxkT2xsam14VHRJZjJYVWpRRkJJUHJvWW9DWUQ3cW8zMlNscFMva0JoUTNGeWFXbyt3RVF1TlQ0QlVKCjlWRU1oYmU5aXdrbThLMFR2eThPdmxlbkVLTkwwUkV2azgwd0NuOGlvM1ZkbGVjV05tM0R1VGtmaXl0Qmw4cGFrbjRIS2VyMFh3WW0KVzdpZ1h6VERMNlduZkd3MUJPN1VsYzU4eDluQUYzZGlBOXVSbDlVM0psVW9WREFiZ0RPMkY4M3hRMjBTUEFvWE5nN0p6TGFwNnJkYwpZU0VwRWZvWC9hKzBSWTBDZzNib1dqbGE5eWtHVlEybFcvek9sVWlQWEorK09IK1BCUUJja25sRWpHVUEvVW5tdk4xdDN6UEhzdlY5CmZLbFhTa1ViWVJpOHpNWXZ6OWtLYlpHdmNzTnlYZ3pqK012b2FyOTZPUHFhUk8ySHJRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQ0k2SGpmY2k3cGRBVnBmcnJKVFZ5OWdZUHJLL3hhM2FFUXRzSkRESy9JZTJoeWVVdWhVT0VzQnlsQ0JCRTU2WFFYbGFpZQpiT25oelluSmhUNkF0MjJYMW9SUFdTTHpNcDR5TGYzRzQ3T0tzcmZPMk9tNEZXZ1pqaVJxbWJCcGxjYWlsWEIzTlgwNFE3N3BJL0J3ClpRZWhEdWc2cytoOWJvOFFxR09GWTlmOFVKL2lDMkFQVjVac1VTNTZwdmUxMXZyVFh6TUZQN3VHQjY3K3ZLeFlLelBVdUVkdkxaVXIKQkVTV3R5ZCtmU2pMZ1o3TnJUSWtaSHByc1JzYmhUVlhDRFRaL1FYUU02TmZsT0RQejJKMkE0SC82cUtsZ0RGMkJYTzFKVDhldUVXdwprc0xpZ25HTlI4SnFPRUJOUUJ1YmdOZ3Q0WFJtdDkwM3NsNEJ0TVVMVHpIYjwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpSZXF1ZXN0ZXIiPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpSZXF1ZXN0RGVuaWVkIi8%2BPC9zYW1sMnA6U3RhdHVzQ29kZT48c2FtbDJwOlN0YXR1c01lc3NhZ2U%2BSW52YWxpZCByZXF1ZXN0LCBBQ1MgVXJsIGluIHJlcXVlc3QgaHR0cHM6Ly9sb2dpbi5hdXRocmVzcy5pby9hcGkvYXV0aGVudGljYXRpb24vc2FtbCBkb2Vzbid0IG1hdGNoIGNvbmZpZ3VyZWQgQUNTIFVybCBodHRwczovL2xvZ2luLmF1dGhyZXNzLmlvL2FwaS9hdXRoZW50aWNhdGlvbi9zYW1sP2FjY291bnRJZD1hY2MtbTdnN2R1c3lma2hvaS48L3NhbWwycDpTdGF0dXNNZXNzYWdlPjwvc2FtbDJwOlN0YXR1cz48L3NhbWwycDpSZXNwb25zZT4%3D';
      
      try {
        const result = await new SamlLogin().getSamlAssertionMetadata(stringRequest);
        expect(result).to.eql(null, 'This SMAL response contains a status that tells us there is a problem, so it should have thrown an error');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        expect(error.code).to.eql('RequestDenied');
        expect(error.message).to.include("Invalid request, ACS Url in request https://login.authress.io/api/authentication/saml doesn't match configured ACS Url https://login.authress.io/api/authentication/saml?accountId=acc-m7g7dusyfkhoi");
      }
    });
  });

  describe('validatePostResponse()', () => {
    it('Throw Invalid Request when the status message says invalid request', async () => {
      const stringRequest = 'SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8%2BPHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vbG9naW4uYXV0aHJlc3MuaW8vYXBpL2F1dGhlbnRpY2F0aW9uL3NhbWw%2FYWNjb3VudElkPWFjYy1tN2c3ZHVzeWZraG9pIiBJRD0iXzNiY2UzYTViMmMzMTIwMDViMDA1ZDVlNzEzN2Y3YmU0IiBJc3N1ZUluc3RhbnQ9IjIwMjUtMDMtMTBUMTQ6NTc6MTkuMTYyWiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDI2MHQwd3I8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8%2BPGRzOlJlZmVyZW5jZSBVUkk9IiNfM2JjZTNhNWIyYzMxMjAwNWIwMDVkNWU3MTM3ZjdiZTQiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT4rSnN4TFhZZ2NZQU1VUng1ZFpqUEFFenhxMFlZbmNZNHpPWjJsQlRQVGJRPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LaThzMktZT3VvZWNpaWp3L0ZQYTVyQkV4VytJN2Rzd1haTjZteXhISWJ6a0FPR21iM3JwUlJzMU1ZeWR4T3lyVlhvaW1wUU9sWTRHCnBnRzZTcGRJbjAxOVdiQkhBRXRPcjczSTRXcVJPRkxJY2tpOWlkelJPYXI0dTNzMVg4LzU5ZHVVcVY3WkYrYzV6QmVyalh3SlVhazQKNWhNbUoxWXljQllqMHhWRnllaGpWSkV0bndBYklDb3VnZkpUQ3ZzQS93S25aUnpsRUlBYnZwb0JKT1o0cVgzZEE5OFpJTEdsOXlQUApBN2N1dEhNRmRpbFY0MUtKN1lOcmJYNmVCdzZYL3ZBbHR2RnhHbEVoVUhVOEZhMDd4U1NpYkhMZUNDOGYwSkRMNkpYcGNhak90QmVOCjF4Y3k0Ky9Ybkh4Y3JxRUMvSUhmZTR1bVhURHdxcHZTMUNnSkl3PT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOVN1YmplY3ROYW1lPlNUPUNhbGlmb3JuaWEsQz1VUyxPVT1Hb29nbGUgRm9yIFdvcmssQ049R29vZ2xlLEw9TW91bnRhaW4gVmlldyxPPUdvb2dsZSBJbmMuPC9kczpYNTA5U3ViamVjdE5hbWU%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEZERDQ0FseWdBd0lCQWdJR0FaVTJDR2VNTUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4RkRBU0JnTlZCQW9UQzBkdmIyZHNaU0JKCmJtTXVNUll3RkFZRFZRUUhFdzFOYjNWdWRHRnBiaUJXYVdWM01ROHdEUVlEVlFRREV3WkhiMjluYkdVeEdEQVdCZ05WQkFzVEQwZHYKYjJkc1pTQkdiM0lnVjI5eWF6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFd0hoY05NalV3TWpJMApNRE16TnpVMFdoY05NekF3TWpJek1ETXpOelUwV2pCN01SUXdFZ1lEVlFRS0V3dEhiMjluYkdVZ1NXNWpMakVXTUJRR0ExVUVCeE1OClRXOTFiblJoYVc0Z1ZtbGxkekVQTUEwR0ExVUVBeE1HUjI5dloyeGxNUmd3RmdZRFZRUUxFdzlIYjI5bmJHVWdSbTl5SUZkdmNtc3gKQ3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUEzcUZGOWxkT2xsam14VHRJZjJYVWpRRkJJUHJvWW9DWUQ3cW8zMlNscFMva0JoUTNGeWFXbyt3RVF1TlQ0QlVKCjlWRU1oYmU5aXdrbThLMFR2eThPdmxlbkVLTkwwUkV2azgwd0NuOGlvM1ZkbGVjV05tM0R1VGtmaXl0Qmw4cGFrbjRIS2VyMFh3WW0KVzdpZ1h6VERMNlduZkd3MUJPN1VsYzU4eDluQUYzZGlBOXVSbDlVM0psVW9WREFiZ0RPMkY4M3hRMjBTUEFvWE5nN0p6TGFwNnJkYwpZU0VwRWZvWC9hKzBSWTBDZzNib1dqbGE5eWtHVlEybFcvek9sVWlQWEorK09IK1BCUUJja25sRWpHVUEvVW5tdk4xdDN6UEhzdlY5CmZLbFhTa1ViWVJpOHpNWXZ6OWtLYlpHdmNzTnlYZ3pqK012b2FyOTZPUHFhUk8ySHJRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQ0k2SGpmY2k3cGRBVnBmcnJKVFZ5OWdZUHJLL3hhM2FFUXRzSkRESy9JZTJoeWVVdWhVT0VzQnlsQ0JCRTU2WFFYbGFpZQpiT25oelluSmhUNkF0MjJYMW9SUFdTTHpNcDR5TGYzRzQ3T0tzcmZPMk9tNEZXZ1pqaVJxbWJCcGxjYWlsWEIzTlgwNFE3N3BJL0J3ClpRZWhEdWc2cytoOWJvOFFxR09GWTlmOFVKL2lDMkFQVjVac1VTNTZwdmUxMXZyVFh6TUZQN3VHQjY3K3ZLeFlLelBVdUVkdkxaVXIKQkVTV3R5ZCtmU2pMZ1o3TnJUSWtaSHByc1JzYmhUVlhDRFRaL1FYUU02TmZsT0RQejJKMkE0SC82cUtsZ0RGMkJYTzFKVDhldUVXdwprc0xpZ25HTlI4SnFPRUJOUUJ1YmdOZ3Q0WFJtdDkwM3NsNEJ0TVVMVHpIYjwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpSZXF1ZXN0ZXIiPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpSZXF1ZXN0RGVuaWVkIi8%2BPC9zYW1sMnA6U3RhdHVzQ29kZT48c2FtbDJwOlN0YXR1c01lc3NhZ2U%2BSW52YWxpZCByZXF1ZXN0LCBBQ1MgVXJsIGluIHJlcXVlc3QgaHR0cHM6Ly9sb2dpbi5hdXRocmVzcy5pby9hcGkvYXV0aGVudGljYXRpb24vc2FtbCBkb2Vzbid0IG1hdGNoIGNvbmZpZ3VyZWQgQUNTIFVybCBodHRwczovL2xvZ2luLmF1dGhyZXNzLmlvL2FwaS9hdXRoZW50aWNhdGlvbi9zYW1sP2FjY291bnRJZD1hY2MtbTdnN2R1c3lma2hvaS48L3NhbWwycDpTdGF0dXNNZXNzYWdlPjwvc2FtbDJwOlN0YXR1cz48L3NhbWwycDpSZXNwb25zZT4%3D';
      
      const options = {
        requestTimestamp: new Date(),
        providerCertificate: "-----BEGIN CERTIFICATE-----\nMIIDdDCCAlygAwIBAgIGAZU2CGeMMA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJ\nbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dv\nb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMjUwMjI0\nMDMzNzU0WhcNMzAwMjIzMDMzNzU0WjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMN\nTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsx\nCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEA3qFF9ldOlljmxTtIf2XUjQFBIProYoCYD7qo32SlpS/kBhQ3FyaWo+wEQuNT4BUJ\n9VEMhbe9iwkm8K0Tvy8OvlenEKNL0REvk80wCn8io3VdlecWNm3DuTkfiytBl8pakn4HKer0XwYm\nW7igXzTDL6WnfGw1BO7Ulc58x9nAF3diA9uRl9U3JlUoVDAbgDO2F83xQ20SPAoXNg7JzLap6rdc\nYSEpEfoX/a+0RY0Cg3boWjla9ykGVQ2lW/zOlUiPXJ++OH+PBQBcknlEjGUA/UnmvN1t3zPHsvV9\nfKlXSkUbYRi8zMYvz9kKbZGvcsNyXgzj+Mvoar96OPqaRO2HrQIDAQABMA0GCSqGSIb3DQEBCwUA\nA4IBAQCI6Hjfci7pdAVpfrrJTVy9gYPrK/xa3aEQtsJDDK/Ie2hyeUuhUOEsBylCBBE56XQXlaie\nbOnhzYnJhT6At22X1oRPWSLzMp4yLf3G47OKsrfO2Om4FWgZjiRqmbBplcailXB3NX04Q77pI/Bw\nZQehDug6s+h9bo8QqGOFY9f8UJ/iC2APV5ZsUS56pve11vrTXzMFP7uGB67+vKxYKzPUuEdvLZUr\nBESWtyd+fSjLgZ7NrTIkZHprsRsbhTVXCDTZ/QXQM6NflODPz2J2A4H/6qKlgDF2BXO1JT8euEWw\nksLignGNR8JqOEBNQBubgNgt4XRmt903sl4BtMULTzHb\n-----END CERTIFICATE-----",
        applicationEntityId: `https://login.authress.io/api/authentication/saml?accountId=acc-m7g7dusyfkhoi`,
        expectedProviderIssuer: 'https://accounts.google.com/o/saml2?idpid=C0260t0wr'
      }
      
      try {
        const result = await new SamlLogin().validatePostResponse(options, stringRequest);
        expect(result).to.eql(null, 'This SMAL response contains a status that tells us there is a problem, so it should have thrown an error');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
        expect(error.code).to.eql('RequestDenied');
        expect(error.message).to.include("Invalid request, ACS Url in request https://login.authress.io/api/authentication/saml doesn't match configured ACS Url https://login.authress.io/api/authentication/saml?accountId=acc-m7g7dusyfkhoi");
      }
    });
  });


  describe('parseSamlRequestMetadata()', () => {
    it('parseSamlRequest', async () => {
      const date = new Date();
      const identityProviderIssuerUrl = "https://Account-Id.login.authress.io/api/authentication/saml?appId=applicationId";
      const requestingApplicationUrl = "https://api.staging.application.com/api/saml/authress/callback";
      const applicationEntityId = 'https://applicationIdentityId';

      const samlRequestUrl = await new SamlLogin().generateAuthenticationUrl({
        providerSingleSignOnUrl: identityProviderIssuerUrl,
        requestTimestamp: date,
        applicationEntityId: applicationEntityId,
        applicationCallbackAssertionConsumerServiceUrl: requestingApplicationUrl,
        allowCreate: true
      });

      const samlRequest = new URL(samlRequestUrl).search.toString();
      const result = await new SamlLogin().parseSamlRequestMetadata(samlRequest);
      const expectedResult = {
        requestedIssuerEntityId: identityProviderIssuerUrl,
        applicationEntityId: applicationEntityId,
        applicationAssertionConsumerServiceUrl: requestingApplicationUrl,
        requestTimestap: date
      };
      expect(result).to.eql(expectedResult);
    });

    it('correctly parses valid saml request', async () => {
      const samlRequestString = 'fVNNb+IwEL33V6DcyRcJtBZEYmE/kChEkO5hLyvjDMTaxM56nJb++7UTaOmqii9Wxm/evHkzmSKtyprMG12IHfxtAPXdwJxzVQok7ePMaZQgkiJHImgFSDQj+/njmoSuT2oltWSydP5L68+iiKA0l6JLWy1nznbzdb39vtr8fphEcRwf/VEwio8smozvgzwMfD9gEDP/cJ+PJ34IftSl/gSFhmfmGNoukir5zHNQG1N15jwCFsWlCmIDK4GaCm3wfhgN/dEwCLMgIFFIgvGvDrc0JnBBdUtbaF0j8TzK2DCUnLHzqICHc87dUp64cKlxTgGiy6VHa+7ZbxCaszbfs1a8yWqN+sJFzsWp359DB0LyI8vSYbrdZx3J/OrbQgpsKlB7UM+cwdNufSO15q5p0qg7uZVt32WyasVZNd5VscdoWR4o++MkLffUvpLWJJX0c33gmXq3ie9UNbETWC1TWXL22sbt+SZVRXV/+zbC8+GxhZLajhi1cdV5Y5mXpXxZKKDazFirBpyB96H2ZZkhb1fb2KXhrAcLWdVUcbSThTNl+tL7e/+38EVp9nQHx6R3lRlhFmfCqblepMrtqIGZ2pmiAmup9MWjT8k71V6P7OTu+nz7nyb/AA==';

      const samlRequest = new URLSearchParams({ SAMLRequest: samlRequestString });
      const result = await new SamlLogin().parseSamlRequestMetadata(samlRequest.toString());
      expect(result).not.to.eql(null);
    });
  });
});